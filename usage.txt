Usage: ./driver.sh <options>

Script description: Build a Linux kernel image with Clang and boot it

Environment variables:
  The script can take into account specific environment variables, mostly used
  with Travis.  They can be invoked in one of three ways:
    $ export VAR=<value> && ./driver.sh
    $ VAR=value ./driver.sh
    $ ./driver.sh VAR=value

  AR:
      If no AR value is specified, the script will attempt to set AR to
      llvm-ar-10 llvm-ar-9, llvm-ar-8, llvm-ar-7, llvm-ar, then
      ${CROSS_COMPILE}ar if they are found in PATH.
  ARCH (required):
      If no ARCH value is specified, it's an error; there is no default.
      Currently, arm32_v7, arm32_v6, arm32_v5, arm64, mips, mipsel, ppc32,
      ppc64, ppc64le, s390, riscv, x86, and x86_64 are supported.
  CC:
      If no CC value is specified, the script will attempt to set CC to
      clang-10, clang-9, clang-8, clang-7, then clang if they are found
      in PATH.
  LD:
      If no LD value is specified, ${CROSS_COMPILE}ld is used.
  LLVM_IAS:
      If this is set to 1, the integrated assembler is used. No value means
      ${CROSS_COMPILE}as is used for assembling.
  REPO:
      Nicknames for trees:
        linux (default)
        linux-next
        5.4
        4.19
        4.14
        4.9
        4.4
        android-mainline
        android-5.4
        android-4.19
        android-4.14-stable
        android-4.9-q
  OBJSIZE:
      If no OBJSIZE value is specified, the script will attempt to set OBJSIZE
      to llvm-size-10 llvm-size-9, llvm-size-8, llvm-size-7, llvm-size, then
      ${CROSS_COMPILE}size if they are found in PATH.


Optional parameters:
  -c | --clean:
      Run 'make mrproper' before building the kernel. Normally, the build
      system is smart enought to figure out what needs to be rebuilt but
      sometimes it might be necessary to clean it manually.
  -j | --jobs
      Pass this value to make. The script will use all cores by default but
      this isn't always the best value.
  --lto
      By default, the script turns off LTO/CFI for quicker build times. If
      your machine can handle the more intensive compile, pass this flag
      to avoid attempting to disable it. This does not enable LTO explicitly.
